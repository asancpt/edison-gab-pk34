
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd("D:/Rt/Gab/")
> require(wnl)
Loading required package: wnl
Loading required package: numDeriv
> dPK34 = read.csv("PK34.csv", skip=1)
> colnames(dPK34) = c("TIME", "MOL", "DV", "ID") ; dPK34
   TIME MOL     DV ID
1    20  Cp 2.8980  1
2    30  Cp 3.7958  1
3    40  Cp 4.3491  1
4    60  Cp 5.0832  1
5    65  Cp 5.1105  1
6    80  Cp 3.2216  1
7    95  Cp 2.1134  1
8   120  Cp 0.9499  1
9   150  Cp 0.4529  1
10  180  Cp 0.1996  1
11   20  Cm 0.3432  1
12   30  Cm 0.4787  1
13   40  Cm 0.5655  1
14   60  Cm 0.6874  1
15   65  Cm 0.6351  1
16   80  Cm 0.4933  1
17   95  Cm 0.3230  1
18  120  Cm 0.1947  1
19  150  Cm 0.0873  1
20    5  Cp 0.1678  2
21   10  Cp 0.4507  2
22   15  Cp 0.5905  2
23   20  Cp 0.8120  2
24   30  Cp 0.9562  2
25   45  Cp 0.8809  2
26   60  Cp 0.8715  2
27  120  Cp 0.3371  2
28  150  Cp 0.1646  2
29  180  Cp 0.0965  2
30    5  Cm 3.3911  2
31   10  Cm 2.8098  2
32   15  Cm 2.3812  2
33   20  Cm 2.1331  2
34   30  Cm 1.8709  2
35   45  Cm 1.1224  2
36   60  Cm 0.8564  2
37  120  Cm 0.2119  2
38  180  Cm 0.0507  2
> 
> S1 = cbind(TIME=c(0, 60), RATE1=c(2.375,0), RATE2=c(0.065, 0))
> S2 = cbind(TIME=c(0,5), RATE1=c(0, 0), RATE2=c(2, 0))
> InfHist = list(S1, S2) ; InfHist
[[1]]
     TIME RATE1 RATE2
[1,]    0 2.375 0.065
[2,]   60 0.000 0.000

[[2]]
     TIME RATE1 RATE2
[1,]    0     0     2
[2,]    5     0     0

> 
> require(deSolve)
Loading required package: deSolve
> PKde = function(t, y, p)
+ {
+   cInf = InfHist[[cID]]
+   Rate1 = cInf[findInterval(t, cInf[,"TIME"]),"RATE1"]
+   Rate2 = cInf[findInterval(t, cInf[,"TIME"]),"RATE2"]
+ 
+   Ke1 = p["CLp"]/p["Vc"]
+   Ke2 = p["CLm"]/p["Vm"]
+   
+   K12 = p["CLd1"]/p["Vc"]
+   K21 = p["CLd2"]/p["Vm"]
+   
+   dy1dt = Rate1/p["Vc"] - Ke1*y[1] - K12*y[1] + K21*y[2]
+   dy2dt = Rate2/p["Vm"] - Ke2*y[2] + K12*y[1] - K21*y[2]
+ 
+   return(list(c(dy1dt, dy2dt)))  
+ }
> 
> TIME = sort(unique(c(0, dPK34[,"TIME"]))) ; TIME
 [1]   0   5  10  15  20  30  40  45  60  65  80  95 120 150 180
> 
> iTime1 = TIME %in% dPK34[dPK34$ID==1 & dPK34$MOL == "Cp", "TIME"] ; iTime1 ; TIME[iTime1]
 [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [1]  20  30  40  60  65  80  95 120 150 180
> iTime2 = TIME %in% dPK34[dPK34$ID==1 & dPK34$MOL == "Cm", "TIME"] ; iTime2 ; TIME[iTime2]
 [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
[1]  20  30  40  60  65  80  95 120 150
> iTime3 = TIME %in% dPK34[dPK34$ID==2 & dPK34$MOL == "Cp", "TIME"] ; iTime3 ; TIME[iTime3]
 [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE
 [1]   5  10  15  20  30  45  60 120 150 180
> iTime4 = TIME %in% dPK34[dPK34$ID==2 & dPK34$MOL == "Cm", "TIME"] ; iTime4 ; TIME[iTime4]
 [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE
[1]   5  10  15  20  30  45  60 120 180
> 
> ## Figure 34.1, p 639
> plot(0, 0, type="n", xlim=c(0, 180), ylim=c(0, 6), xlab="Time (min)", ylab="Concentration (uM)")
> 
> IDs = unique(dPK34[,"ID"])
> nID = length(IDs)
> 
> y = vector()
> for (i in 1:nID) {
+   cID <<- IDs[i] # referencing wihtin PKde
+   cy = lsoda(y=c(0, 0), times=TIME, func=PKde, parms=c(Vc=14.1169, Vm=2.96671, CLp=0.445693, CLm=0.00833429, CLd1=0.00308422, CLd2=0.0632217))
+   iTime1 = TIME %in% dPK34[dPK34$ID==cID & dPK34$MOL == "Cp", "TIME"]
+   iTime2 = TIME %in% dPK34[dPK34$ID==cID & dPK34$MOL == "Cm", "TIME"]
+   points(dPK34[dPK34$ID==cID & dPK34$MOL == "Cp", "TIME"], dPK34[dPK34$ID==cID & dPK34$MOL == "Cp", "DV"], pch=19, col=i)
+   points(dPK34[dPK34$ID==cID & dPK34$MOL == "Cm", "TIME"], dPK34[dPK34$ID==cID & dPK34$MOL == "Cm", "DV"], pch=15, col=i)
+   lines(TIME, cy[,"1"], col=i)
+   lines(TIME, cy[,"2"], lty=2, col=i)
+   y = c(y, cy[iTime1,"1"], cy[iTime2,"2"])
+ } ; y
 [1] 2.55552376 3.37761139 3.99610671 4.81441001 4.17378776 2.72732733 1.78989627 0.89572921 0.39647380 0.17838586 0.35283682 0.47772517 0.57722944 0.71947375 0.64234466
[16] 0.45657052 0.32400849 0.18240085 0.09118321 0.16369918 0.43388961 0.63098688 0.76954597 0.91680743 0.93544164 0.83643957 0.33047538 0.18391146 0.09863677 3.17547144
[31] 2.81502383 2.49576460 2.21294735 1.74035083 1.21461251 0.84833055 0.20307299 0.04893432
> ###
> 
> 
> fPK34 = function(THETA)
+ {
+   Vc   = THETA[1]
+   Vm   = THETA[2]
+   CLp  = THETA[3]
+   CLm  = THETA[4]
+   CLd1 = THETA[5]
+   CLd2 = THETA[6]
+   
+   y = vector()
+   for (i in 1:nID) {
+     cID <<- IDs[i] # referencing wihtin PKde
+     cy = lsoda(y=c(0, 0), times=TIME, func=PKde, parms=c(Vc=Vc, Vm=Vm, CLp=CLp, CLm=CLm, CLd1=CLd1, CLd2=CLd2))
+     iTime1 = TIME %in% dPK34[dPK34$ID==cID & dPK34$MOL == "Cp", "TIME"]
+     iTime2 = TIME %in% dPK34[dPK34$ID==cID & dPK34$MOL == "Cm", "TIME"]
+     y = c(y, cy[iTime1,"1"], cy[iTime2,"2"])
+   }
+   return(y)
+ }
> fPK34(c(14.1169, 2.96671, 0.445693, 0.00833429, 0.00308422, 0.0632217))
 [1] 2.55552376 3.37761139 3.99610671 4.81441001 4.17378776 2.72732733 1.78989627 0.89572921 0.39647380 0.17838586 0.35283682 0.47772517 0.57722944 0.71947375 0.64234466
[16] 0.45657052 0.32400849 0.18240085 0.09118321 0.16369918 0.43388961 0.63098688 0.76954597 0.91680743 0.93544164 0.83643957 0.33047538 0.18391146 0.09863677 3.17547144
[31] 2.81502383 2.49576460 2.21294735 1.74035083 1.21461251 0.84833055 0.20307299 0.04893432
> 
> nlr(fPK34, dPK34, pNames=c("Vc", "Vm", "CLp", "CLm", "CLd1", "CLd2"), IE=c(15, 3, 0.5, 0.01, 0.003, 0.1), Error="P")  # different result
$Est
            Vc         Vm         CLp          CLm         CLd1        CLd2   PropErrVar    PropErrSD
PE  12.2632223 2.96922318 0.387163717  0.008286228 2.769220e-03 0.063359711 2.358498e-03  0.048564370
SE   0.2976141 0.06429357 0.007053857  0.002297237 9.378015e-04 0.003403815 5.451718e-04  0.005612879
RSE  2.4268835 2.16533300 1.821931206 27.723550725 3.386518e+01 5.372207654 2.311521e+01 11.557605967

$Cov
                      Vc            Vm           CLp           CLm          CLd1          CLd2    PropErrVar
Vc          8.857416e-02 -4.059350e-03  1.763707e-03  2.384853e-04 -1.234065e-06 -2.907455e-04  3.195370e-06
Vm         -4.059350e-03  4.133663e-03  1.205204e-05 -1.215658e-04  3.361468e-05  2.006395e-04  1.607169e-06
CLp         1.763707e-03  1.205204e-05  4.975689e-05 -4.102777e-07  9.578955e-07  8.793774e-07  1.295802e-07
CLm         2.384853e-04 -1.215658e-04 -4.102777e-07  5.277296e-06 -9.934532e-07 -7.453596e-06 -2.241168e-08
CLd1       -1.234065e-06  3.361468e-05  9.578955e-07 -9.934532e-07  8.794717e-07  1.985034e-06  1.541532e-08
CLd2       -2.907455e-04  2.006395e-04  8.793774e-07 -7.453596e-06  1.985034e-06  1.158596e-05  6.205444e-08
PropErrVar  3.195370e-06  1.607169e-06  1.295802e-07 -2.241168e-08  1.541532e-08  6.205444e-08  2.972123e-07

$run
$run$m
[1] 18

$run$n
[1] 20

$run$run
[1] 20

$run$p.value
[1] 0.5601923


$AIC
[1] -131.043

$AICc
[1] -127.3097

> # Vc  12.3 vs 14.1 (R vs WinNonlin, NONMEM)
> # AIC -131.0377 vs -131.05554 (R vs WinNonlin)
> e$r # -214.8824 vs -214.895 (R vs NONMEM)
$par
[1] -0.10144821  0.08968804 -0.15576057 -0.08799020  0.01995352 -0.35634204 -3.64714529

$value
[1] -214.8824

$counts
function gradient 
     114      114 

$convergence
[1] 52

$message
[1] "ERROR: ABNORMAL_TERMINATION_IN_LNSRCH"

>  
> 
